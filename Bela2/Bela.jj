PARSER_BEGIN(Bela)
import java.io.*;

public class Bela {

  public static void main(String args[]) throws ParseException, IOException {
    Bela analisador = new Bela(new FileInputStream(args[0]));
    analisador.BELA(); // Agora chama o parser sintático (não mais o léxico)
    System.out.println("Análise sintática concluída com sucesso!");
  }
}
PARSER_END(Bela)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : {
    < MAIN: "main" > | < VAR: "var" > | < FUN: "fun" > | < IF: "if" > | < THEN: "then" > 
  | < WHILE: "while" > | < ELSE: "else" > | < RETURN: "return" > | < PRINTLN: "printLn" > 
  | < READINPUT: "readInput" > | < TRUE: "true" > | < FALSE: "false" > | < FLOAT: "float" > 
  | < BOOL: "bool" > | < VOID: "void" > | < APAR: "(" > | < FPAR: ")" > | < ACHAVES: "{" > 
  | < FCHAVES: "}" > | < PONTOEVIRGULA: ";" > | < IGUAL: "=" > | < VIRGULA: "," > 
  | < MAIS: "+" > | < MENOS: "-" > | < MULT: "*" > | < DIV: "/" > | < AND: "&&" > 
  | < OR: "||" > | < MENOR: "<" > | < MAIOR: ">" > | < IGUAL_IGUAL: "==" > 
  | < NUM: (["0"-"9"])+ ("." (["0"-"9"])+ )? ("E" ("+" | "-")? (["0"-"9"])+ )? > 
  | < ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9"])* ("_" (["a"-"z","A"-"Z","0"-"9"])+ )? >
}

// ----- Regras do Parser Sintático -----
void BELA() : {} { MAIN() (FUNC())? <EOF> }

void MAIN() : {} {
  <MAIN> <APAR> <FPAR> <ACHAVES> 
  VARDECL() 
  SEQCOMANDOS() 
  <FCHAVES>
}

void VARDECL() : {} { ( <VAR> TIPO() <ID> <PONTOEVIRGULA> )* }

void TIPO() : {} { <FLOAT> | <BOOL> | <VOID> }

void SEQCOMANDOS() : {} { ( COMANDO() )* }

void COMANDO() : {} {
  // <ID> <IGUAL> EXP() <PONTOEVIRGULA>
  // | <ID> <IGUAL> <READINPUT> <APAR> <FPAR> <PONTOEVIRGULA>
  // | <ID> <APAR> (LISTAEXP())? <FPAR> <PONTOEVIRGULA>
  <ID> COMANDO_ID()
  | <IF> EXP() <THEN> <ACHAVES> SEQCOMANDOS() <FCHAVES> (<ELSE> <ACHAVES> SEQCOMANDOS() <FCHAVES>)? <PONTOEVIRGULA>
  | <WHILE> EXP() <ACHAVES> SEQCOMANDOS() <FCHAVES> <PONTOEVIRGULA>
  | <RETURN> EXP() <PONTOEVIRGULA>
  | <PRINTLN> EXP() <PONTOEVIRGULA>
}

void COMANDO_ID() : {} {
  <IGUAL> COMANDO_ID_IGUAL()
  | <APAR> (LISTAEXP())? <FPAR> <PONTOEVIRGULA>
}

void COMANDO_ID_IGUAL() : {} {
  EXP() <PONTOEVIRGULA>
  | <READINPUT> <APAR> <FPAR> <PONTOEVIRGULA>
}

// void EXP() : {} { EXP_OP() ( <AND> EXP_OP() )* }
// void EXP_OP() : {} { EXP_COMP() ( <OR> EXP_COMP() )* }
// void EXP_COMP() : {} { EXP_ARIT() ( (<IGUAL_IGUAL> | <MENOR> | <MAIOR>) EXP_ARIT() )* }
// void EXP_ARIT() : {} { TERMO() ( (<MAIS> | <MENOS>) TERMO() )* }

void EXP() : {} {
  <APAR> EXP() OP() EXP() <FPAR>
  | FATOR()
}

void OP() : {} {
  <AND>
  | <OR>
  | <IGUAL_IGUAL>
  | <MENOR>
  | <MAIOR>
  | <MAIS>
  | <MENOS>
  | <MULT>
  | <DIV>
}

void TERMO() : {} { FATOR() ( (<MULT> | <DIV>) FATOR() )* }
void FATOR() : {} {
  <ID> ( <APAR> (LISTAEXP())? <FPAR> )?
  | <NUM>
  | <TRUE>
  | <FALSE>
}

void LISTAEXP() : {} { EXP() ( <VIRGULA> EXP() )* }

void FUNC() : {} {
  (<FUN> TIPO() <ID> <APAR> (LISTAARG())? <FPAR> 
  <ACHAVES> 
  VARDECL() 
  SEQCOMANDOS() 
  <FCHAVES>)+
}

void LISTAARG() : {} { TIPO() <ID> ( <VIRGULA> TIPO() <ID> )* }